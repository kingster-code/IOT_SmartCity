@page "/dadosatm"

@using IOT_Data.Models
@using Monitor_Business.interfaces
@using Monitor_Business.DTO
@inject IZoneBusiness funcoes
@using Syncfusion.Blazor.Data
@inject NavigationManager NavigationManager

<SfChart Title="Dados relativos ao ar" Theme="@Theme" @ref="Chart">
    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="yyyy" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis LabelFormat="{value}%" RangePadding="ChartRangePadding.None">
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@zones" Name="CO2" XName="Date" Width="2"
                     Opacity="1" YName="CO" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="CO" XName="Date" Width="2"
                     Opacity="1" YName="CO2" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="NOx" XName="Date" Width="2"
                     Opacity="1" YName="NOx" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="SOx" XName="Date" Width="2"
                     Opacity="1" YName="SOx" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="HC" XName="Date" Width="2"
                     Opacity="1" YName="HC" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="Rcho" XName="Date" Width="2"
                     Opacity="1" YName="Rcho" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@zones" Name="MP" XName="Date" Width="2"
                     Opacity="1" YName="MP" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10">
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<!-- Text input-->
<div class="form-group">
    <label class="col-md-4 control-label" for="Id do sensor atmosfera">Id do sensor atmosfera</label>
    <div class="col-md-4">
        <input id="Id do sensor atmosfera" name="Id do sensor atmosfera" type="text" placeholder="´" class="form-control input-md" @bind-value="@CurrentValue" @bind-value:event="oninput">
    </div>
</div>

<!-- Button -->
<div class="form-group">
    <label class="col-md-4 control-label" for=""></label>
    <div class="col-md-4">
        <button @onclick="Foo" class="btn btn-primary">Atualizar</button>
    </div>
</div>
@code {
    private Theme Theme { get; set; }
    SfChart Chart;
    private List<AtmData> zones;

    private List<AtmData> zonesinicial = new List<AtmData>();
    private long CurrentValue { get; set; }

    private void Foo()
    {
        zones = zonesinicial.Where(s => s.Sensor.Zone.ZoneId == CurrentValue).OrderBy(s => s.Date).ToList();

        //zones=funcoes.GetAtmZone().Where(s => s.Sensor.Zone.ZoneId == CurrentValue).OrderBy(s => s.Date).ToList();
        Chart.RefreshLiveData();
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentValue = 1;

        Zone zona = new Zone { Name = "covilha", ZoneId = 1 };
        var type = new SensorType { SensorName = "detetar", TypeId = 1 };
        Sensor s = new Sensor { SensorId = 1, Type = type, Zone = zona };

        Zone zona2 = new Zone { Name = "guarda", ZoneId = 2 };
        var type2 = new SensorType { SensorName = "detetar", TypeId = 2 };
        Sensor s2 = new Sensor { SensorId = 2, Type = type2, Zone = zona2 };

        Zone zona3 = new Zone { Name = "porto", ZoneId = 3 };
        var type3 = new SensorType { SensorName = "detetar", TypeId = 3 };
        Sensor s3 = new Sensor { SensorId = 3, Type = type3, Zone = zona3 };
        var rng = new Random();
        var test = new List<AtmData>();

        for (int i = 0; i < 5; i++)
        {
            test.Add(new AtmData
            {
                AtmreadId = i,
                CO = rng.NextDouble(),
                HC = rng.NextDouble(),
                Rcho = rng.NextDouble(),
                NOx = rng.NextDouble(),
                SOx = rng.NextDouble(),
                MP = rng.NextDouble(),
                CO2 = rng.NextDouble(),
                Date = new DateTime(rng.Next(2018, 2021), rng.Next(1, 12), rng.Next(1, 12)),
                Sensor = s,
            });
            test.Add(new AtmData
            {
                AtmreadId = i,
                CO = rng.NextDouble(),
                HC = rng.NextDouble(),
                Rcho = rng.NextDouble(),
                NOx = rng.NextDouble(),
                SOx = rng.NextDouble(),
                MP = rng.NextDouble(),
                CO2 = rng.NextDouble(),
                Date = new DateTime(rng.Next(2018, 2021), rng.Next(1, 12), rng.Next(1, 12)),
                Sensor = s2,
            });
            test.Add(new AtmData
            {
                AtmreadId = i,
                CO = rng.NextDouble(),
                HC = rng.NextDouble(),
                Rcho = rng.NextDouble(),
                NOx = rng.NextDouble(),
                SOx = rng.NextDouble(),
                MP = rng.NextDouble(),
                CO2 = rng.NextDouble(),
                Date = new DateTime(rng.Next(2018, 2021), rng.Next(1, 12), rng.Next(1, 12)),
                Sensor = s3,
            });

        }

        zonesinicial = test.ToList();
        test = test.Where(s => s.Sensor.Zone.ZoneId == CurrentValue).OrderBy(s => s.Date).ToList();
        zones = test;




        //zones=funcoes.GetAtmZone().Where(s => s.Sensor.Zone.ZoneId == CurrentValue).OrderBy(s => s.Date).ToList();
        if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            Theme = Theme.Material;
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            Theme = Theme.Fabric;
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            Theme = Theme.Bootstrap;
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            Theme = Theme.HighContrast;
        }
        else
        {
            Theme = Theme.Bootstrap4;
        }

    }

}
